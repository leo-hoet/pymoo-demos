from dataclasses import dataclass
from typing import List, Tuple

RequirementIdx = int
StakeholderIdx = int


@dataclass
class NRPParams:
    len_req: int
    len_customers: int

    max_allowed_cost: float

    profits_per_customer: List[float]
    cost_per_req: List[float]

    pre_req_set: List[Tuple[RequirementIdx, RequirementIdx]]
    interest_set: List[Tuple[StakeholderIdx, RequirementIdx]]

    fo_optimum: float


def _assert_parameters_are_consistent(params: NRPParams):
    assert params.len_req == len(params.cost_per_req)
    assert params.len_customers == len(params.profits_per_customer)
    for stakeholder_i, req_k in params.interest_set:
        assert stakeholder_i <= params.len_customers, f"Len customers is {params.len_customers} and found coustomer index {stakeholder_i}"
        assert req_k <= params.len_req, f"Len req is {params.len_req} and found req index {req_k}"

    for req_i, req_j in params.pre_req_set:
        assert req_i <= params.len_req, f"Len req is {params.len_req} and found req index {req_i} in pre_req_set"
        assert req_j <= params.len_req, f"Len req is {params.len_req} and found req index {req_i} in pre_req_set"


def params_100r_140c() -> NRPParams:
    optimums_at_max_cost = [
        (2124.0, 1000),
        (463.0, 100),
    ]
    params = NRPParams(
        fo_optimum=-2124.0,
        max_allowed_cost=100,
        len_req=140,
        len_customers=100,
        profits_per_customer=[
            36, 29, 33, 22, 33, 34, 27, 26, 35, 36, 28, 31, 29, 30, 29, 36, 28, 31, 20, 24, 35, 33, 26, 34, 26, 34, 25,
            34, 26, 29, 27, 26, 34, 28, 28, 37, 32, 23, 30, 26, 27, 31, 36, 38, 29, 30, 28, 29, 19, 25, 31, 36, 30, 28,
            24, 29, 35, 23, 26, 25, 26, 40, 23, 25, 33, 23, 31, 35, 35, 27, 41, 32, 39, 21, 37, 27, 18, 27, 25, 32, 28,
            29, 28, 28, 23, 32, 22, 25, 22, 24, 35, 23, 31, 21, 35, 27, 27, 33, 28, 22,
        ],
        cost_per_req=[
            4, 3, 4, 1, 5, 5, 5, 3, 5, 3, 4, 4, 3, 5, 1, 1, 3, 2, 2, 3, 8, 8, 2, 6, 7, 4, 5, 3, 6, 3, 7, 2, 6, 3, 5, 2,
            2, 4, 2, 5, 4, 5, 2, 2, 8, 4, 2, 4, 8, 7, 3, 6, 6, 4, 3, 6, 4, 8, 6, 7, 9, 6, 10, 6, 9, 10, 7, 9, 7, 6, 10,
            6, 5, 10, 5, 6, 6, 6, 5, 6, 8, 10, 9, 6, 10, 7, 10, 8, 9, 9, 6, 10, 8, 8, 10, 10, 6, 7, 6, 8, 7, 10, 7, 9,
            6, 6, 8, 6, 7, 8, 7, 7, 6, 7, 9, 6, 7, 6, 8, 6, 6, 7, 5, 7, 5, 8, 9, 10, 10, 6, 5, 9, 8, 10, 7, 8, 7, 9, 7,
            7
        ],
        pre_req_set=[
            (0, 85), (1, 98), (1, 37), (1, 92), (1, 51), (1, 135), (1, 73), (1, 72), (2, 61), (4, 114), (4, 37),
            (4, 92), (4, 48), (4, 119), (5, 130), (5, 42), (6, 129), (6, 120), (6, 68), (6, 95), (6, 108), (6, 54),
            (9, 124), (9, 133), (9, 127), (9, 116), (10, 38), (10, 101), (10, 61), (11, 103), (11, 125), (12, 28),
            (12, 59), (13, 135), (13, 103), (13, 34), (13, 107), (16, 74), (16, 120), (16, 50), (16, 27), (16, 102),
            (16, 88), (16, 104), (18, 76), (18, 34), (18, 120), (19, 33), (19, 27), (19, 81), (19, 129), (19, 123),
            (19, 21), (20, 100), (20, 66), (21, 77), (21, 89), (23, 94), (23, 126), (26, 108), (28, 98), (31, 118),
            (31, 83), (33, 112), (34, 79), (37, 124), (37, 104), (38, 90), (38, 64), (39, 94), (41, 89), (42, 107),
            (42, 91), (43, 132), (43, 92), (44, 115), (44, 98), (45, 133), (46, 63), (47, 82), (48, 87), (48, 110),
            (50, 136), (51, 138), (51, 137), (52, 77), (52, 133), (53, 113), (54, 61), (55, 62), (56, 91), (56, 138),
            (59, 85),
        ],
        interest_set=[
            (0, 66), (1, 68), (1, 1), (1, 128), (1, 139), (1, 61), (2, 129), (2, 59), (3, 75), (3, 104), (4, 93),
            (5, 3), (5, 120), (6, 47), (6, 35), (6, 119), (6, 66), (7, 75), (7, 24), (8, 120), (8, 133), (8, 108),
            (8, 19), (9, 77), (9, 60), (10, 50), (11, 63), (11, 24), (11, 81), (11, 126), (11, 123), (12, 36),
            (12, 102), (12, 59), (13, 22), (13, 114), (13, 27), (13, 120), (13, 58), (14, 77), (14, 119), (14, 23),
            (14, 48), (14, 73), (15, 61), (16, 81), (17, 78), (18, 94), (18, 123), (18, 92), (19, 128), (20, 21),
            (20, 91), (20, 26), (20, 40), (20, 107), (21, 109), (21, 76), (21, 59), (22, 68), (22, 120), (22, 105),
            (22, 54), (23, 14), (23, 38), (23, 103), (23, 110), (23, 29), (24, 91), (24, 104), (24, 51), (25, 115),
            (25, 73), (25, 112), (25, 125), (25, 56), (26, 108), (26, 96), (27, 59), (27, 41), (27, 72), (28, 133),
            (28, 134), (28, 122), (28, 59), (29, 100), (29, 136), (29, 23), (29, 98), (29, 26), (30, 133), (31, 64),
            (31, 76), (31, 67), (31, 38), (32, 43), (32, 73), (32, 83), (32, 124), (32, 102), (33, 116), (34, 91),
            (34, 103), (34, 76), (34, 137), (34, 106), (35, 75), (35, 113), (35, 103), (36, 97), (36, 96), (36, 120),
            (36, 38), (37, 15), (38, 56), (38, 84), (38, 123), (39, 3), (39, 126), (40, 62), (40, 12), (40, 57),
            (40, 43), (40, 51), (41, 79), (41, 60), (41, 42), (41, 75), (42, 24), (43, 105), (43, 21), (44, 98),
            (44, 134), (44, 64), (44, 114), (45, 61), (45, 26), (45, 27), (45, 59), (45, 53), (46, 117), (47, 45),
            (47, 139), (48, 21), (48, 32), (48, 132), (49, 119), (49, 107), (49, 29), (50, 106),
            (50, 23), (50, 118), (50, 37), (50, 107), (51, 73), (51, 93), (52, 86), (52, 102), (53, 39), (53, 76),
            (53, 63), (53, 139), (53, 52), (54, 69), (54, 127), (54, 95), (55, 115), (55, 28), (55, 119), (55, 100),
            (55, 32), (56, 52), (56, 90), (56, 116), (57, 109), (57, 104), (57, 90), (57, 120), (57, 93), (58, 46),
            (58, 85), (59, 101), (59, 129), (60, 74), (61, 25), (61, 57), (62, 72), (63, 134), (64, 74), (64, 104),
            (64, 133), (65, 120), (66, 101), (66, 138), (66, 118), (66, 100), (66, 28), (67, 131), (67, 114), (67, 50),
            (67, 104), (68, 123), (69, 137), (70, 99), (70, 23), (71, 81), (71, 133), (72, 97), (72, 128), (72, 51),
            (73, 65), (73, 84), (73, 80), (73, 30), (74, 67), (75, 64), (76, 86), (76, 16), (76, 12), (76, 78),
            (76, 11), (77, 2), (78, 61), (78, 126), (78, 63), (78, 113), (79, 24), (79, 104), (80, 84), (80, 85),
            (80, 119), (80, 46), (81, 59), (81, 79), (81, 63), (81, 104), (81, 88), (82, 73), (83, 116), (83, 43),
            (83, 114), (83, 83), (83, 97), (84, 78), (84, 101), (85, 15), (85, 120), (86, 40), (86, 77), (87, 134),
            (88, 124), (88, 81), (88, 61), (88, 98), (89, 43), (89, 121), (90, 121), (90, 93), (90, 33), (91, 37),
            (91, 97), (91, 34), (91, 73), (91, 53), (92, 124), (92, 74), (92, 91), (93, 137), (93, 71), (93, 41),
            (94, 85), (94, 125), (94, 58), (94, 104), (94, 40), (95, 104), (96, 79), (96, 123), (96, 63), (96, 34),
            (96, 87), (97, 101), (97, 134), (98, 83), (98, 37), (98, 85), (99, 85),
        ]
    )
    _assert_parameters_are_consistent(params)
    return params
